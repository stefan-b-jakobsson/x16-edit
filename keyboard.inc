;******************************************************************************
;Copyright 2020-2022, Stefan Jakobsson.
;
;This file is part of X16 Edit.
;
;X16 Edit is free software: you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;X16 Edit is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with X16 Edit.  If not, see <https://www.gnu.org/licenses/>.
;******************************************************************************

;******************************************************************************
;General information on keyboard functions
;---------------------------------------------
;X16 Edit uses a custom PS/2 scan code handler to read status of modifier
;keys and to get keys not supported by the Kernal (for instance numerical key pad 
;keys). The scan code handler is implemented in source file "scancode.inc".
;
;The status of each modifier key is represented by one bit (1=down, 0=up) in 
;variable "scancode_modifiers" as follows:
;
;Bit #  Key   
;0      SHIFT
;1      ALT
;2      CTRL
;3      WIN
;4      CAPS
;
;The scan code handler consumes Ctrl key events. This means that the
;the Kernal GETIN function returns the same result for A and Ctrl+A.
;The only way to know whether the Ctrl key is pressed is to check the value 
;of scancode_modifiers.
;
;The value of extra keys supported by the scan code handler is stored in
;variable "scancode_ext". That variable holds the last pressed extra key.
;
;Printable chars have their default PETSCII/ASCII value. 
;
;List of non-printable extra keys:
;
;Key        Value
;DELETE     = $15
;END        = $16
;PGUP       = $17
;PGDN       = $18
;INSERT     = $1a

;******************************************************************************
;Function name.......: keyboard_read_and_dispatch
;Purpose.............: Reads one character from the keyboard buffer and
;                      dispatches that to proper key handler
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_read_and_dispatch
    ;Don't read keyboard if APP_MOD=16 (set on charset changed)
    lda APP_MOD
    cmp #16
    beq gotachar

    ;Check and handle non-standard extra keys
    ;lda scancode_ext
    ;beq :+
    ;stz scancode_ext
    ;bra gotachar

    ;Read standard keys
    bridge_setaddr KERNAL_GETIN
    bridge_call KERNAL_GETIN
    bne gotachar

    ;No input to handle, run memory defrag instead during this interrupt cycle
    jmp mem_run_defrag
    
gotachar:
    ;Store char in Y temporarily
    tay

    ;Calculate index in jump table
    lda APP_MOD
    asl
    tax

    ;Get key modifiers
    bridge_setaddr KERNAL_KBDBUF_GET_MODIFIERS
    bridge_call KERNAL_KBDBUF_GET_MODIFIERS
    sta scancode_modifiers
    cmp #KBD_MODIFIER_CTRL
    bne :+
    tya
    ora #64
    tay

    ;Restore char in A
:   tya

    ;Jump to APP mode event handler
    jmp (jmptbl,x)

jmptbl:
    .word keyboard_mode_default                 ;APP mode 0
    .word keyboard_mode_helpscreen              ;APP mode 1
    .word keyboard_mode_statusmessage           ;APP mode 2
    .word keyboard_mode_command                 ;APP mode 3
    .word keyboard_mode_file_save               ;APP mode 4
    .word keyboard_mode_file_open               ;APP mode 5
    .word keyboard_mode_file_save_overwrite     ;APP mode 6
    .word keyboard_mode_file_open_save_before   ;APP mode 7
    .word keyboard_mode_exit_save_before        ;APP mode 8
    .word keyboard_mode_new_buffer_save_before  ;APP mode 9
    .word keyboard_mode_find                    ;APP mode 10
    .word keyboard_mode_goto_line               ;APP mode 11
    .word keyboard_mode_replace_0               ;APP mode 12
    .word keyboard_mode_replace_1               ;APP mode 13
    .word keyboard_mode_replace_2               ;APP mode 14
    .word keyboard_mode_word_wrap_prompt        ;APP mode 15
    .word cmd_refresh_after_encoding_changed    ;APP mode 16
    .word keyboard_mode_set_device              ;APP mode 17
    .word keyboard_mode_file_dir                ;APP mode 18
    .word keyboard_mode_file_dir                ;APP mode 19
    .word keyboard_mode_dos_cmd                 ;APP mode 20
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_default
;Purpose.............: Key dispatcher for the default mode, i.e. text entry
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_default
    ;Check modifier key status
    ldx scancode_modifiers
    cpx #KBD_MODIFIER_CTRL
    beq ctrl

default:
    ;Search key value table for matches (control keys and other keys requiring special actions)
    ldx #default_keyval_end-default_keyval
:   cmp default_keyval-1,x
    beq default_match
    dex
    bne :-

    ;Convert non-breaking space (Shift+space, ASCII 160) to normal space char (ASCII 32)
    cmp #$a0
    bne default_insert
    lda #$20

default_insert:
    ;Insert char into buffer and update screen
    jsr cmd_insert
    bcs :+
    jmp screen_println
:   jsr screen_refresh
    jmp screen_println

default_match:
    ;Action for special keys, for example arrow keys and function keys
    dex
    txa
    asl
    tax
    jmp (default_jmptbl,x)

ctrl:
    ;Insert non-breaking space if Ctrl+Space
    cmp #$20
    bne :+
    lda #$a0
    jmp default_insert

    ;Convert lower case letters to upper case
:   and #%11011111

    ;Look for matches in key value table
    ldx #keyboard_ctrl_keyval_end-keyboard_ctrl_keyval
:   cmp keyboard_ctrl_keyval-1,x
    beq ctrl_match
    dex
    bne :-

    ;Ctrl+R - Open file
    cmp #$52
    bne :+
    lda #0
    jmp cmd_file_open_prompt

    ;Ctrl+S - Replace string
:   cmp #$53
    bne :+
    lda #0
    jmp cmd_replace

    ;Ctrl+Backspace - Delete current line
:   cmp #$14
    bne :+
    jmp cmd_delete_line

    ;Exit
:   rts

ctrl_match:
    ;Action for Ctrl+key combinations
    dex
    txa
    asl
    tax
    jmp (keyboard_ctrl_jmptbl,x)

default_keyval:
    .byt $03, $0d, $14, $09, $9d
    .byt $1d, $91, $11, $13, $93
    .byt $85, $89, $86, $8a
    .byt $87, $8b, $88, $8c
    .byt $15, $16, $17, $18, $19
    .byt $1a
default_keyval_end:

default_jmptbl:
    .word keyboard_esc_key, keyboard_enter_key, keyboard_backspace_key, cmd_insert_tab, keyboard_leftarrow_key
    .word keyboard_rightarrow_key, keyboard_uparrow_key, keyboard_downarrow_key, keyboard_home_key, keyboard_end_key
    .word cmd_show_help, cmd_exit, cmd_file_save_prompt, cmd_wrap_buffer
    .word cmd_file_open_prompt, cmd_find, keyboard_cmd_pageup, keyboard_cmd_pagedown
    .word keyboard_delete_key, keyboard_end_key, keyboard_cmd_pageup, keyboard_cmd_pagedown, keyboard_enter_key
    .word mem_run_defrag
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_command
;Purpose.............: Key dispatcher: The user has pressed and released ESC
;                      and the next key is interpreted as a command
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_command
    ;1..9
    cmp #$31
    bcc :+
    cmp #$3b
    bcs :+
    
    sec
    sbc #48
    jsr cmd_set_tab_width

    stz APP_MOD
    jsr screen_clear_status
    jmp cursor_activate

    ;Space, convert to non-breaking space
:   cmp #$20
    bne :++
    stz APP_MOD
    jsr cursor_activate
    jsr screen_clear_status
    lda #160
    jsr cmd_insert
    bcs :+
    jmp screen_println
:   jsr screen_refresh
    jmp screen_println

    ;ESC key
:   cmp #$03
    bne :+
    stz APP_MOD
    jsr cursor_activate
    jmp screen_clear_status
    
    ;Clear bit 5 to make upper and lower case the same value
:   and #%11011111

    ;Search keyval table
    ldy #keyboard_ctrl_keyval_end-keyboard_ctrl_keyval
:   cmp keyboard_ctrl_keyval-1,y
    beq match
    dey
    bne :-

    ;r
    cmp #$52
    bne :+
    jsr cursor_activate
    lda #0
    jmp cmd_file_open_prompt

    ;s
:   cmp #$53
    bne :+
    jsr cursor_activate
    lda #0
    jmp cmd_replace

    ;Uknown command, ignore
    rts

match:
    phy

    stz APP_MOD
    jsr screen_clear_status
    jsr cursor_activate

    pla
    dea
    asl
    tax
    jmp (keyboard_ctrl_jmptbl,x)
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_statusmessage
;Purpose.............: Key dispatcher: Showing a message in the status bar
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_statusmessage
    pha

    ;Any key press will close the status message
    stz APP_MOD
    jsr screen_clear_status
    jsr cursor_activate

    ;If other than Esc key, send it to default handler
    pla
    cmp #3
    beq :+
    jmp keyboard_mode_default
:   rts

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_helpscreen
;Purpose.............: Key dispatcher: Showing the built-in help screen
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_helpscreen
    ;Exit help screen if ESC was pressed, ignore all other input
    cmp #03
    beq exit_help
    rts

exit_help:
    stz APP_MOD
    jsr screen_refresh
    jsr screen_clear_status
    jmp cursor_activate
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_exit_save_before
;Purpose.............: Key dispatcher: Prompting the user to save
;                      current buffer before program exit
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_exit_save_before
    ;ESC key pressed
    cmp #$03
    beq abort
    
    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111
    
    ;Y key pressed
    cmp #$59
    beq save

    ;N key pressed
    cmp #$4e
    beq discard

    ;Else ignore keypress
    rts

save:
    jsr cursor_activate
    jsr screen_clear_status
    jmp cmd_file_save_prompt

discard:
    ;Set app quit signal
    lda #1
    sta APP_QUIT
    rts

abort:
    jsr cursor_activate
    stz APP_MOD
    jmp screen_clear_status
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_file_save
;Purpose.............: Key dispatcher: Prompting the user to enter a file
;                      name, whereto the buffer is to be saved
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_file_save
    ;Enter key
    cmp #13
    beq write_file
    
    ;ESC key
    cmp #$03
    beq abort

    ;Temp store char
    tax

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111

    ;Ctrl+T
    cmp #$54
    bne :+
    lda scancode_modifiers
    cmp #KBD_MODIFIER_CTRL
    beq tofiles
    
    ;Default, send key to prompt
:   txa
    jmp prompt_keypress

abort:
    jsr prompt_close
    stz APP_MOD
    jmp screen_print_default_footer

write_file:
    jsr screen_print_default_footer
    ldx #<prompt_input
    ldy #>prompt_input
    lda prompt_len
    jmp cmd_file_save

tofiles:
    lda #19
    sta APP_MOD
    jsr cursor_disable
    jsr screen_print_dir_ctx_footer
    ldx #1
    ldy #0
    jmp dir_show
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_file_save_overwrite
;Purpose.............: Key dispatcher: Prompting the user to confirm overwriting
;                      an existing file
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_file_save_overwrite
    ;ESC key
    cmp #$03
    beq abort

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111

    ;Y key pressed
    cmp #$59
    beq write_file

    ;N key
    cmp #$4e
    beq abort

    ;Else ignore key
    rts

abort:
    stz APP_MOD         ;mode_default
    jsr cursor_activate
    jmp screen_clear_status

write_file:

    jmp cmd_file_save_overwrite

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_file_open
;Purpose.............: Key dispatcher: Prompting the user to enter a file name
;                      to be opened and read into the text buffer
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_file_open
    ;Enter key
    cmp #13
    beq read_file

    ;ESC key
    cmp #$03
    beq abort

    ;Temp store
    tax

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111

    ;Ctrl+T
    cmp #$54
    bne :+
    lda scancode_modifiers
    cmp #KBD_MODIFIER_CTRL
    beq tofiles

    ;Default, send key to prompt
:   txa
    jmp prompt_keypress

abort:
    jsr prompt_close
    stz APP_MOD
    jmp screen_print_default_footer

read_file:
    jsr screen_print_default_footer
    ldx #<prompt_input
    ldy #>prompt_input
    lda prompt_len
    jmp cmd_file_open

tofiles:
    lda #18
    sta APP_MOD
    jsr cursor_disable
    jsr screen_print_dir_ctx_footer
    ldx #1
    ldy #0
    jmp dir_show

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_file_dir
;Purpose.............: Key dispatcher: Showing directory listing
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_file_dir
    ;Enter key
    cmp #13
    bne :+
    jmp enterkey

    ;ESC key
:   cmp #$03
    bne :+
    jmp abort

    ;Up arrow key
:   cmp #$91
    bne :+
    jmp uparrow

    ;Down arrow key
:   cmp #$11
    bne :+
    jmp downarrow

    ;Page down key
:   cmp #KBD_EXT_PGDN
    bne :+
    jmp nextpage

    ;Page up key
:   cmp #KBD_EXT_PGUP
    bne :+
    jmp prevpage

    ;Ctrl
:   ldx scancode_modifiers
    cpx #KBD_MODIFIER_CTRL
    bne exit

    ;Convert to lower
    and #%11011111

    ;Ctrl+Y
    cmp #$59
    bne :+
    jmp prevpage
    
    ;Ctrl+V
:   cmp #$56
    bne exit
    jmp nextpage

    ;Default, no action
exit:
    rts

enterkey:
    clc
    lda dir_first
    adc dir_selected
    tax
    lda dir_first+1
    adc #0
    tay
    jsr dir_getitem

    lda dir_type
    cmp #'d'
    bne :+
    ldx #<dir_entry
    ldy #>dir_entry
    lda dir_filename_len
    jmp dir_change

:   jsr screen_clear_editor
    jsr prompt_close

    ldx #<dir_entry
    ldy #>dir_entry
    lda dir_filename_len
    jsr prompt_default_input
    jsr prompt_refresh
    
    lda APP_MOD
    cmp #18
    beq open
save:
    jsr screen_print_default_footer
    jsr cursor_activate
    ldx #<prompt_input
    ldy #>prompt_input
    lda prompt_len
    jmp cmd_file_save

open:
    stz APP_MOD
    jsr screen_print_default_footer
    jsr cursor_activate
    ldx #<prompt_input
    ldy #>prompt_input
    lda prompt_len
    jmp cmd_file_open

abort:
    lda APP_MOD
    cmp #18
    beq abortopen
abortsave:
    jsr screen_print_file_ctx_footer
    jsr cursor_activate
    lda #4
    sta APP_MOD
    jmp :+
abortopen:
    jsr screen_print_file_ctx_footer
    jsr cursor_activate
    lda #5
    sta APP_MOD
:   jsr screen_clear_editor
    jmp screen_refresh

uparrow:
    ldx dir_selected
    dex
    jmp dir_select

downarrow:
    ldx dir_selected
    inx
    jmp dir_select

nextpage:
    jmp dir_nextpage

prevpage:
    jmp dir_prevpage

.endproc


;******************************************************************************
;Function name.......: keyboard_mode_file_open_save_before
;Purpose.............: Key dispatcher: Prompting the user to save the current
;                      text buffer before opening and reading a file
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_file_open_save_before
    ;ESC key
    cmp #$03
    beq abort

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111
    
    ;Y key pressed
    cmp #$59
    beq save

    ;N key pressed
    cmp #$4e
    beq discard

    ;Else ignore keypress
    rts

save:
    jsr cursor_activate
    jmp cmd_file_save_prompt

discard:
    jsr cursor_activate
    stz mem_modified
    jsr cmd_file_open_prompt
    inc mem_modified
    rts

abort:
    jsr cursor_activate
    stz APP_MOD
    jsr screen_clear_status
    rts

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_file_dos_cmd
;Purpose.............: Key dispatcher: Prompting the user to enter dos command
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_dos_cmd
    ;Enter key
    cmp #13
    beq enterkey

    ;ESC key
    cmp #$03
    beq abort

    ;Default
    jmp prompt_keypress

enterkey:
    jmp cmd_file_dos_command_exec

abort:
    stz APP_MOD
    jmp prompt_close
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_new_buffer_save_before
;Purpose.............: Key dispatcher: Prompting the user to save the current
;                      text buffer before creating a new buffer
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_new_buffer_save_before
    ;ESC key
    cmp #$03
    beq abort

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111
    
    ;Y key pressed
    cmp #$59
    beq save

    ;N key pressed
    cmp #$4e
    beq discard

    ;Else ignore keypress
    rts

save:
    jsr cursor_activate
    jmp cmd_file_save_prompt

discard:
    jsr cursor_activate
    jsr screen_clear_status
    stz APP_MOD
    stz mem_modified
    jmp cmd_new_buffer

abort:
    jsr cursor_activate
    stz APP_MOD
    jmp screen_clear_status
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_set_device
;Purpose.............: Key dispatcher: Prompting the user to enter device
;                      number
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_set_device
    ;ESC key
    cmp #$03
    beq abort

    ;Enter
    cmp #13
    beq enter

    ;Default
    jmp prompt_keypress

abort:
    stz APP_MOD
    jmp prompt_close

enter:
    jmp cmd_file_do_set_device
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_find
;Purpose.............: Key dispatcher: Prompting the user to enter a search
;                      param
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_find
    ;Enter key
    cmp #13
    beq search

    ;ESC key
    cmp #$03
    beq abort

    jmp prompt_keypress

search:
    jsr prompt_close
    stz APP_MOD

    jsr cursor_disable

    ldx #<prompt_input
    ldy #>prompt_input
    lda prompt_len
    jsr cmd_do_find
    bcs notfound
    
    jsr screen_refresh
    jsr screen_println
    jmp cursor_activate

notfound:
    ldx #<msg
    ldy #>msg
    jsr screen_print_status
    lda #2
    sta APP_MOD
    jmp cursor_activate

abort:
    jsr prompt_close
    stz APP_MOD
    rts

msg:
    .byt "string not found",0
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_replace_0
;Purpose.............: Key dispatcher: Prompting the user to enter a search
;                      param
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_replace_0
    ;Enter key
    cmp #13
    beq search

    ;ESC key
    cmp #$03
    beq abort

    jmp prompt_keypress

search:
    jsr prompt_close
    stz APP_MOD

    lda #1
    jmp cmd_replace

abort:
    jsr prompt_close
    stz APP_MOD
    rts

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_replace_1
;Purpose.............: Key dispatcher: Prompting the user to enter a string
;                      that will replace the search param
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_replace_1
    ;Enter key
    cmp #13
    beq search

    ;ESC key
    cmp #$03
    beq abort

    jmp prompt_keypress

search:
    jsr prompt_close
    stz APP_MOD

    jsr cursor_disable
    lda #2
    jsr cmd_replace
    jmp cursor_activate

abort:
    jsr prompt_close
    stz APP_MOD
    rts

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_replace_2
;Purpose.............: Key dispatcher: Prompting the user to confirm replacing
;                      one or all occurences
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_replace_2
    ;ESC
    cmp #$03
    beq abort

    ;Clear bit 5 to make upper and lower case the same value
    and #%11011111
    
    ;Y
    cmp #121-32
    beq yes

    ;A
    cmp #97-32
    beq all

    ;Ignore all other input
    rts

yes:
    jsr cursor_disable
    ldx #0
    lda #3
    jsr cmd_replace
    jmp cursor_activate

all:
    jsr cursor_disable
    ldx #1
    lda #3
    jsr cmd_replace
    jmp cursor_activate

abort:
    stz APP_MOD
    jmp screen_clear_status
.endproc

;******************************************************************************
;Function name.......: keyboard_mode_word_wrap_prompt
;Purpose.............: Key dispatcher: Prompting the user to enter at what
;                      column to wrap lines
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_word_wrap_prompt
    ;ESC
    cmp #$03
    beq abort

    ;Enter
    cmp #13
    beq enter

    ;Default
    jmp prompt_keypress

enter:
    jmp cmd_set_word_wrap

abort:
    stz APP_MOD
    jmp prompt_close

.endproc

;******************************************************************************
;Function name.......: keyboard_mode_goto_line
;Purpose.............: Key dispatcher: Prompting the user to enter a line
;                      number
;Input...............: A=char
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_mode_goto_line
    ;Enter key
    cmp #13
    beq goto_line

    ;ESC key
    cmp #$03
    beq abort

    ;Default action
    jmp prompt_keypress

goto_line:
    jmp cmd_do_goto_line

abort:
    stz APP_MOD
    jmp prompt_close

.endproc
    
;******************************************************************************
;Function name.......: keyboard_esc_key
;Purpose.............: Key handler: Enter command select mode
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_esc_key
    lda #3
    sta APP_MOD

    jsr cursor_disable

    ldx #<msg
    ldy #>msg
    jmp screen_print_status

msg:
    .byt "enter command or press esc to abort",0
.endproc

;******************************************************************************
;Function name.......: keyboard_enter_key
;Purpose.............: Key handler: Insert line break
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_enter_key
    ;Insert linefeed char
    lda cmd_auto_indent_status
    beq :+
    jsr cursor_disable

:   lda #LF
    jsr cmd_insert

    lda cmd_auto_indent_status
    beq :+
    jsr cursor_activate

:   jmp screen_refresh
.endproc

;******************************************************************************
;Function name.......: keyboard_backspace_key
;Purpose.............: Key handler: Backspace
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_backspace_key
    jsr cmd_delete

    bcs exit            ;C=1, at start of file
    
    cpx #0
    beq update_line     ;X=0, we didn't delete a LF, no need to refresh all of screen

    jsr screen_refresh

update_line:
    jsr screen_println

exit:
    rts
.endproc

;******************************************************************************
;Function name.......: keyboard_delete_key
;Purpose.............: Key handler: Delete
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_delete_key
    jsr cmd_go_right
    cpx #1 
    beq exit
    
    jmp keyboard_backspace_key
exit:
    rts
.endproc

;******************************************************************************
;Function name.......: keyboard_rightarrow_key
;Purpose.............: Key handler: Move right
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_rightarrow_key
    jsr cursor_disable
    jsr cmd_go_right
    php
    jsr cursor_activate
    plp
    bcs :+
    jmp screen_println
:   jmp screen_refresh
.endproc

;******************************************************************************
;Function name.......: keyboard_leftarrow_key
;Purpose.............: Key handler: Move left
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_leftarrow_key
    jsr cursor_disable
    jsr cmd_go_left
    php
    jsr cursor_activate
    plp
    bcc :+
    
    jsr screen_refresh
:   jmp screen_println
.endproc

;******************************************************************************
;Function name.......: keyboard_uparrow_key
;Purpose.............: Key handler: Move up
;Preparatory routines: None
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_uparrow_key
    jsr cursor_disable
    jsr cmd_go_up
    jsr cursor_activate
    jsr cursor_toggle
    jsr screen_refresh
    jmp screen_println
.endproc

;******************************************************************************
;Function name.......: keyboard_downarrow_key
;Purpose.............: Key handler: Move down
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_downarrow_key
    jsr cursor_disable
    jsr cmd_go_down
    jsr cursor_activate
    jsr cursor_toggle
    jsr screen_refresh
    jmp screen_println
.endproc

;******************************************************************************
;Function name.......: keyboard_home_key
;Purpose.............: Key handler: Move home
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_home_key
    jsr cursor_disable
    jsr cmd_go_home
    jsr cursor_activate
    jmp screen_println
.endproc

;******************************************************************************
;Function name.......: keyboard_end_key
;Purpose.............: Key handler: Move end
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_end_key
    jsr cursor_disable
    jsr cmd_go_end
    jsr cursor_activate
    jmp screen_println
.endproc

;******************************************************************************
;Function name.......: keyboard_cmd_pageup
;Purpose.............: Key handler: Move PageUp
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_cmd_pageup
    jsr cursor_disable

    lda #27
    sta linecount

:   jsr cmd_go_up
    bcs :+
    dec linecount
    bne :-

:   jsr cursor_activate
    jmp screen_refresh

.segment "VARS"
    linecount: .res 1
.CODE

.endproc

;******************************************************************************
;Function name.......: keyboard_cmd_pagedown
;Purpose.............: Key handler: Move PageDown
;Preparatory routines: None
;Input...............: Nothing
;Returns.............: Nothing
;Error returns.......: None
.proc keyboard_cmd_pagedown
    jsr cursor_disable

    lda #27
    sta linecount

:   jsr cmd_go_down
    bcs :+
    dec linecount
    bne :-

:   jsr cursor_activate
    jmp screen_refresh

.segment "VARS"
    linecount: .res 1
.CODE

.endproc

;Ctrl+key value table
keyboard_ctrl_keyval:
    .byt $47, $49, $4a, $58, $4f
    .byt $4e, $56, $59, $4b, $50
    .byt $55, $57, $4c, $41
    .byt $5a, $45, $44, $54, $42
    .byt $4d
keyboard_ctrl_keyval_end:

;Ctrl+key jump table
keyboard_ctrl_jmptbl:
    .word cmd_show_help, cmd_file_dos_command_prompt, cmd_wrap_buffer, cmd_exit, cmd_file_save_prompt
    .word cmd_new_buffer, keyboard_cmd_pagedown, keyboard_cmd_pageup, cmd_cut, cmd_copy
    .word cmd_paste, cmd_find, cmd_goto_line, cmd_auto_indent
    .word cmd_set_word_wrap, cmd_change_encoding, cmd_file_set_device, cmd_rotate_text_color, cmd_rotate_background_color
    .word cmd_mem_usage

.segment "VARS"
    keyboard_tabwidth:      .res 1              ;1 byte
.CODE